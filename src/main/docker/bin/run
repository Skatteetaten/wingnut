#!/bin/bash

function set_java_opts_memory_from_bytes() {
  CONTAINER_MEMORY_IN_BYTES=$1;

  if [ "$CONTAINER_MEMORY_IN_BYTES" -lt "10000000" ];then
    return
  fi

  DEFAULT_MEMORY_CEILING=$((2**40-1))
  if (( "${CONTAINER_MEMORY_IN_BYTES}" >= "${DEFAULT_MEMORY_CEILING}" )); then
    return
  fi

  if [ -z $CONTAINER_HEAP_PERCENT ]; then
      CONTAINER_HEAP_PERCENT=0.80
  fi

  CONTAINER_MEMORY_IN_MB=$((${CONTAINER_MEMORY_IN_BYTES}/1024**2))
  CONTAINER_HEAP_MAX=$(echo "${CONTAINER_MEMORY_IN_MB} ${CONTAINER_HEAP_PERCENT}" | awk '{ printf "%d", $1 * $2 }')

  export JAVA_OPTS="-Xmx${CONTAINER_HEAP_MAX}m"

}

export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF-8 -Djava.net.preferIPv4Stack=true"

if [ -z "$JAVA_OPTS" ]; then
  #Try out to see max memory based on kubernetes limitations
  CONTAINER_MEMORY_IN_BYTES=`cat /sys/fs/cgroup/memory/memory.limit_in_bytes`
  set_java_opts_memory_from_bytes "$CONTAINER_MEMORY_IN_BYTES"
fi

JAVA_DEBUG_ARGS=""
if [ "x${REMOTE_DEBUG}" == "xtrue" ]; then
  export JAVA_DEBUG_ARGS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${DEBUG_PORT}"
fi

cd application
echo "Starting application in $(pwd)... $(date)"

# We set a trap on TERM so we can have code running after the child has terminated. OpenShift gives an
# error on a non-zero exit code, and the JVM exits with 143 when sent at SIGTERM
# This construct depends on an init-system like dumb-init that signals all processes in the session. If the JVM
# is not signaled, it will not exit, the trap will not run, and everything will hang...
trap 'exit 0' TERM
# We run the script explicitly through bash to allow shebang lines of the form #!/usr/bin/env bash -eu
bash bin/start




